{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nvar firebaseConfig = {\n  apiKey: 'AIzaSyAQzQv5g7fafQFuUorr4f3dyOo69-O6LNg',\n  authDomain: 'e-commerce-74c73.firebaseapp.com',\n  databaseURL: 'https://e-commerce-74c73.firebaseio.com',\n  projectId: 'e-commerce-74c73',\n  storageBucket: 'e-commerce-74c73.appspot.com',\n  messagingSenderId: '56984038698',\n  appId: '1:56984038698:web:96ebe1e4634bb3454e4253',\n  measurementId: 'G-K26PD3VL6C'\n};\nfirebase.initializeApp(firebaseConfig);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date().toString();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n      console.log('date-', createdAt.toString());\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/alin/alinSpinjitzu/udemy courses/8_Complete React Developer in 2020/25_react_e-store/src/api/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","toString","set","console","log","error","message","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,WAAW,EAAE,yCAHM;AAInBC,EAAAA,SAAS,EAAE,kBAJQ;AAKnBC,EAAAA,aAAa,EAAE,8BALI;AAMnBC,EAAAA,iBAAiB,EAAE,aANA;AAOnBC,EAAAA,KAAK,EAAE,0CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAArB;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB;AAEA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACpB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAlB;;AAEA,QAAI;AACF,YAAMX,OAAO,CAACY,GAAR,CAAY;AAChBL,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAMAc,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,SAAS,CAACE,QAAV,EAArB;AACD,KARD,CAQE,OAAOI,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOhB,OAAP;AACD,CAxBM;AA0BP,OAAO,MAAMiB,+BAA+B,GAAIC,WAAD,IAAiB;AAC9D,QAAMC,qBAAqB,GAAGD,WAAW,CAACE,IAAZ,CAAiBC,GAAjB,CAAsBnB,GAAD,IAAS;AAC1D,UAAM;AAAEoB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBrB,GAAG,CAACsB,IAAJ,EAAzB;AACA,WAAO;AACLC,MAAAA,SAAS,EAAEC,SAAS,CAACJ,KAAK,CAACK,WAAN,EAAD,CADf;AAELC,MAAAA,EAAE,EAAE1B,GAAG,CAAC0B,EAFH;AAGLN,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAR6B,CAA9B;AAUA,SAAOJ,qBAAqB,CAACU,MAAtB,CAA6B,CAACC,WAAD,EAAcC,UAAd,KAA6B;AAC/DD,IAAAA,WAAW,CAACC,UAAU,CAACT,KAAX,CAAiBK,WAAjB,EAAD,CAAX,GAA8CI,UAA9C;AACA,WAAOD,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAfM;AAiBP,OAAO,MAAME,IAAI,GAAG9C,QAAQ,CAAC8C,IAAT,EAAb;AACP,OAAO,MAAM/B,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMgC,QAAQ,GAAG,IAAI/C,QAAQ,CAAC8C,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/C,QAAf","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nvar firebaseConfig = {\n  apiKey: 'AIzaSyAQzQv5g7fafQFuUorr4f3dyOo69-O6LNg',\n  authDomain: 'e-commerce-74c73.firebaseapp.com',\n  databaseURL: 'https://e-commerce-74c73.firebaseio.com',\n  projectId: 'e-commerce-74c73',\n  storageBucket: 'e-commerce-74c73.appspot.com',\n  messagingSenderId: '56984038698',\n  appId: '1:56984038698:web:96ebe1e4634bb3454e4253',\n  measurementId: 'G-K26PD3VL6C',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date().toString();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData,\n      });\n      console.log('date-', createdAt.toString());\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n  const transformedCollection = collections.docs.map((doc) => {\n    const { title, items } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items,\n    };\n  });\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}