{
  "{\"sourceRoot\":\"/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/\",\"babelrc\":false,\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/home/alin/alinSpinjitzu/udemy courses/8_Complete React Developer in 2020/25_react_e-store\",\"filename\":\"/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/update-react-imports.js\",\"cloneInputAst\":true,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/alin/alinSpinjitzu/udemy courses/8_Complete React Developer in 2020/25_react_e-store\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{}},{\"key\":\"transform-flow-strip-types\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]},\"ImportDeclaration\":{\"enter\":[null,null]},\"ClassPrivateProperty\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"TypeCastExpression\":{\"enter\":[null,null]},\"CallExpression\":{\"enter\":[null]},\"OptionalCallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"ImportSpecifier\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"AnyTypeAnnotation\":{\"enter\":[null]},\"ArrayTypeAnnotation\":{\"enter\":[null]},\"BooleanTypeAnnotation\":{\"enter\":[null]},\"BooleanLiteralTypeAnnotation\":{\"enter\":[null]},\"NullLiteralTypeAnnotation\":{\"enter\":[null]},\"ClassImplements\":{\"enter\":[null]},\"DeclareClass\":{\"enter\":[null]},\"DeclareFunction\":{\"enter\":[null]},\"DeclareInterface\":{\"enter\":[null]},\"DeclareModule\":{\"enter\":[null]},\"DeclareModuleExports\":{\"enter\":[null]},\"DeclareTypeAlias\":{\"enter\":[null]},\"DeclareOpaqueType\":{\"enter\":[null]},\"DeclareVariable\":{\"enter\":[null]},\"DeclareExportDeclaration\":{\"enter\":[null]},\"DeclareExportAllDeclaration\":{\"enter\":[null]},\"DeclaredPredicate\":{\"enter\":[null]},\"ExistsTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeAnnotation\":{\"enter\":[null]},\"FunctionTypeParam\":{\"enter\":[null]},\"GenericTypeAnnotation\":{\"enter\":[null]},\"InferredPredicate\":{\"enter\":[null]},\"InterfaceExtends\":{\"enter\":[null]},\"InterfaceDeclaration\":{\"enter\":[null]},\"InterfaceTypeAnnotation\":{\"enter\":[null]},\"IntersectionTypeAnnotation\":{\"enter\":[null]},\"MixedTypeAnnotation\":{\"enter\":[null]},\"EmptyTypeAnnotation\":{\"enter\":[null]},\"NullableTypeAnnotation\":{\"enter\":[null]},\"NumberLiteralTypeAnnotation\":{\"enter\":[null]},\"NumberTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeAnnotation\":{\"enter\":[null]},\"ObjectTypeInternalSlot\":{\"enter\":[null]},\"ObjectTypeCallProperty\":{\"enter\":[null]},\"ObjectTypeIndexer\":{\"enter\":[null]},\"ObjectTypeProperty\":{\"enter\":[null]},\"ObjectTypeSpreadProperty\":{\"enter\":[null]},\"OpaqueType\":{\"enter\":[null]},\"QualifiedTypeIdentifier\":{\"enter\":[null]},\"StringLiteralTypeAnnotation\":{\"enter\":[null]},\"StringTypeAnnotation\":{\"enter\":[null]},\"SymbolTypeAnnotation\":{\"enter\":[null]},\"ThisTypeAnnotation\":{\"enter\":[null]},\"TupleTypeAnnotation\":{\"enter\":[null]},\"TypeofTypeAnnotation\":{\"enter\":[null]},\"TypeAlias\":{\"enter\":[null]},\"TypeAnnotation\":{\"enter\":[null]},\"TypeParameter\":{\"enter\":[null]},\"TypeParameterDeclaration\":{\"enter\":[null]},\"TypeParameterInstantiation\":{\"enter\":[null]},\"UnionTypeAnnotation\":{\"enter\":[null]},\"Variance\":{\"enter\":[null]},\"VoidTypeAnnotation\":{\"enter\":[null]},\"ExportAllDeclaration\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{}}],\"presets\":[]}:7.12.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/",
      "babelrc": false,
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/home/alin/alinSpinjitzu/udemy courses/8_Complete React Developer in 2020/25_react_e-store",
      "filename": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/update-react-imports.js",
      "cloneInputAst": true,
      "configFile": false,
      "envName": "development",
      "root": "/home/alin/alinSpinjitzu/udemy courses/8_Complete React Developer in 2020/25_react_e-store",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {}
        },
        {
          "key": "transform-flow-strip-types",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            },
            "ImportDeclaration": {
              "enter": [
                null,
                null
              ]
            },
            "ClassPrivateProperty": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "TypeCastExpression": {
              "enter": [
                null,
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "ImportSpecifier": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "AnyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ArrayTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "BooleanLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ClassImplements": {
              "enter": [
                null
              ]
            },
            "DeclareClass": {
              "enter": [
                null
              ]
            },
            "DeclareFunction": {
              "enter": [
                null
              ]
            },
            "DeclareInterface": {
              "enter": [
                null
              ]
            },
            "DeclareModule": {
              "enter": [
                null
              ]
            },
            "DeclareModuleExports": {
              "enter": [
                null
              ]
            },
            "DeclareTypeAlias": {
              "enter": [
                null
              ]
            },
            "DeclareOpaqueType": {
              "enter": [
                null
              ]
            },
            "DeclareVariable": {
              "enter": [
                null
              ]
            },
            "DeclareExportDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclareExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "DeclaredPredicate": {
              "enter": [
                null
              ]
            },
            "ExistsTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "FunctionTypeParam": {
              "enter": [
                null
              ]
            },
            "GenericTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "InferredPredicate": {
              "enter": [
                null
              ]
            },
            "InterfaceExtends": {
              "enter": [
                null
              ]
            },
            "InterfaceDeclaration": {
              "enter": [
                null
              ]
            },
            "InterfaceTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "IntersectionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "MixedTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "EmptyTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NullableTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "NumberTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ObjectTypeInternalSlot": {
              "enter": [
                null
              ]
            },
            "ObjectTypeCallProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeIndexer": {
              "enter": [
                null
              ]
            },
            "ObjectTypeProperty": {
              "enter": [
                null
              ]
            },
            "ObjectTypeSpreadProperty": {
              "enter": [
                null
              ]
            },
            "OpaqueType": {
              "enter": [
                null
              ]
            },
            "QualifiedTypeIdentifier": {
              "enter": [
                null
              ]
            },
            "StringLiteralTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "StringTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "SymbolTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ThisTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TupleTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeofTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeAlias": {
              "enter": [
                null
              ]
            },
            "TypeAnnotation": {
              "enter": [
                null
              ]
            },
            "TypeParameter": {
              "enter": [
                null
              ]
            },
            "TypeParameterDeclaration": {
              "enter": [
                null
              ]
            },
            "TypeParameterInstantiation": {
              "enter": [
                null
              ]
            },
            "UnionTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "Variance": {
              "enter": [
                null
              ]
            },
            "VoidTypeAnnotation": {
              "enter": [
                null
              ]
            },
            "ExportAllDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/update-react-imports.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "nullishCoalescingOperator",
          "optionalChaining",
          [
            "flow",
            {}
          ]
        ]
      },
      "generatorOpts": {
        "filename": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/update-react-imports.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/",
        "sourceFileName": "update-react-imports.js"
      }
    },
    "ast": null,
    "code": "/**\n * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.\n *\n * @format\n */\n'use strict';\n\nmodule.exports = function (file, api, options) {\n  const j = api.jscodeshift;\n  const printOptions = options.printOptions || {};\n  const root = j(file.source);\n  const destructureNamespaceImports = options.destructureNamespaceImports; // https://github.com/facebook/jscodeshift/blob/master/recipes/retain-first-comment.md\n\n  function getFirstNode() {\n    return root.find(j.Program).get('body', 0).node;\n  } // Save the comments attached to the first node\n\n\n  const firstNode = getFirstNode();\n  const {\n    comments\n  } = firstNode;\n\n  function isVariableDeclared(variable) {\n    return root.find(j.Identifier, {\n      name: variable\n    }).filter(path => path.parent.value.type !== 'MemberExpression' && path.parent.value.type !== 'QualifiedTypeIdentifier' && path.parent.value.type !== 'JSXMemberExpression').size() > 0;\n  } // Get all paths that import from React\n\n\n  const reactImportPaths = root.find(j.ImportDeclaration, {\n    type: 'ImportDeclaration'\n  }).filter(path => {\n    return (path.value.source.type === 'Literal' || path.value.source.type === 'StringLiteral') && (path.value.source.value === 'React' || path.value.source.value === 'react');\n  }); // get all namespace/default React imports\n\n  const reactPaths = reactImportPaths.filter(path => {\n    return path.value.specifiers.length > 0 && path.value.importKind === 'value' && path.value.specifiers.some(specifier => specifier.local.name === 'React');\n  });\n\n  if (reactPaths.size() > 1) {\n    throw Error('There should only be one React import. Please remove the duplicate import and try again.');\n  }\n\n  if (reactPaths.size() === 0) {\n    return null;\n  }\n\n  const reactPath = reactPaths.paths()[0]; // Reuse the node so that we can preserve quoting style.\n\n  const reactLiteral = reactPath.value.source;\n  const isDefaultImport = reactPath.value.specifiers.some(specifier => specifier.type === 'ImportDefaultSpecifier' && specifier.local.name === 'React'); // Check to see if we should keep the React import\n\n  const isReactImportUsed = root.find(j.Identifier, {\n    name: 'React'\n  }).filter(path => {\n    return path.parent.parent.value.type !== 'ImportDeclaration';\n  }).size() > 0; // local: imported\n\n  const reactIdentifiers = {};\n  const reactTypeIdentifiers = {};\n  let canDestructureReactVariable = false;\n\n  if (isReactImportUsed && (isDefaultImport || destructureNamespaceImports)) {\n    // Checks to see if the react variable is used itself (rather than used to access its properties)\n    canDestructureReactVariable = root.find(j.Identifier, {\n      name: 'React'\n    }).filter(path => {\n      return path.parent.parent.value.type !== 'ImportDeclaration';\n    }).filter(path => !(path.parent.value.type === 'MemberExpression' && path.parent.value.object.name === 'React') && !(path.parent.value.type === 'QualifiedTypeIdentifier' && path.parent.value.qualification.name === 'React') && !(path.parent.value.type === 'JSXMemberExpression' && path.parent.value.object.name === 'React')).size() === 0;\n\n    if (canDestructureReactVariable) {\n      // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a type variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. Element is declared and we are using React.Element)\n      root.find(j.QualifiedTypeIdentifier, {\n        qualification: {\n          type: 'Identifier',\n          name: 'React'\n        }\n      }).forEach(path => {\n        const id = path.value.id.name;\n\n        if (path.parent.parent.value.type === 'TypeofTypeAnnotation') {\n          // This is a typeof import so it isn't actually a type\n          reactIdentifiers[id] = id;\n\n          if (reactTypeIdentifiers[id]) {\n            canDestructureReactVariable = false;\n          }\n        } else {\n          reactTypeIdentifiers[id] = id;\n\n          if (reactIdentifiers[id]) {\n            canDestructureReactVariable = false;\n          }\n        }\n\n        if (isVariableDeclared(id)) {\n          canDestructureReactVariable = false;\n        }\n      }); // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. createElement is declared and we are using React.createElement)\n\n      root.find(j.MemberExpression, {\n        object: {\n          type: 'Identifier',\n          name: 'React'\n        }\n      }).forEach(path => {\n        const property = path.value.property.name;\n        reactIdentifiers[property] = property;\n\n        if (isVariableDeclared(property) || reactTypeIdentifiers[property]) {\n          canDestructureReactVariable = false;\n        }\n      }); // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a JSX variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. Fragment is declared and we are using React.Fragment)\n\n      root.find(j.JSXMemberExpression, {\n        object: {\n          type: 'JSXIdentifier',\n          name: 'React'\n        }\n      }).forEach(path => {\n        const property = path.value.property.name;\n        reactIdentifiers[property] = property;\n\n        if (isVariableDeclared(property) || reactTypeIdentifiers[property]) {\n          canDestructureReactVariable = false;\n        }\n      });\n    }\n  }\n\n  if (canDestructureReactVariable) {\n    // replace react identifiers\n    root.find(j.QualifiedTypeIdentifier, {\n      qualification: {\n        type: 'Identifier',\n        name: 'React'\n      }\n    }).forEach(path => {\n      const id = path.value.id.name;\n      j(path).replaceWith(j.identifier(id));\n    });\n    root.find(j.MemberExpression, {\n      object: {\n        type: 'Identifier',\n        name: 'React'\n      }\n    }).forEach(path => {\n      const property = path.value.property.name;\n      j(path).replaceWith(j.identifier(property));\n    });\n    root.find(j.JSXMemberExpression, {\n      object: {\n        type: 'JSXIdentifier',\n        name: 'React'\n      }\n    }).forEach(path => {\n      const property = path.value.property.name;\n      j(path).replaceWith(j.jsxIdentifier(property));\n    }); // Add exisiting React imports to map\n\n    reactImportPaths.forEach(path => {\n      const specifiers = path.value.specifiers;\n\n      for (let i = 0; i < specifiers.length; i++) {\n        const specifier = specifiers[i]; // get all type and regular imports that are imported\n        // from React\n\n        if (specifier.type === 'ImportSpecifier') {\n          if (path.value.importKind === 'type' || specifier.importKind === 'type') {\n            reactTypeIdentifiers[specifier.local.name] = specifier.imported.name;\n          } else {\n            reactIdentifiers[specifier.local.name] = specifier.imported.name;\n          }\n        }\n      }\n    });\n    const regularImports = [];\n    Object.keys(reactIdentifiers).forEach(local => {\n      const imported = reactIdentifiers[local];\n      regularImports.push(j.importSpecifier(j.identifier(imported), j.identifier(local)));\n    });\n    const typeImports = [];\n    Object.keys(reactTypeIdentifiers).forEach(local => {\n      const imported = reactTypeIdentifiers[local];\n      typeImports.push(j.importSpecifier(j.identifier(imported), j.identifier(local)));\n    });\n\n    if (regularImports.length > 0) {\n      j(reactPath).insertAfter(j.importDeclaration(regularImports, reactLiteral));\n    }\n\n    if (typeImports.length > 0) {\n      j(reactPath).insertAfter(j.importDeclaration(typeImports, reactLiteral, 'type'));\n    } // remove all old react imports\n\n\n    reactImportPaths.forEach(path => {\n      // This is for import type React from 'react' which shouldn't\n      // be removed\n      if (path.value.specifiers.some(specifier => specifier.type === 'ImportDefaultSpecifier' && specifier.local.name === 'React' && (specifier.importKind === 'type' || path.value.importKind === 'type'))) {\n        j(path).insertAfter(j.importDeclaration([j.importDefaultSpecifier(j.identifier('React'))], reactLiteral, 'type'));\n      }\n\n      j(path).remove();\n    });\n  } else {\n    // Remove the import because it's not being used\n    // If we should keep the React import, just convert\n    // default imports to named imports\n    let isImportRemoved = false;\n    const specifiers = reactPath.value.specifiers;\n\n    for (let i = 0; i < specifiers.length; i++) {\n      const specifier = specifiers[i];\n\n      if (specifier.type === 'ImportNamespaceSpecifier') {\n        if (!isReactImportUsed) {\n          isImportRemoved = true;\n          j(reactPath).remove();\n        }\n      } else if (specifier.type === 'ImportDefaultSpecifier') {\n        if (isReactImportUsed) {\n          j(reactPath).insertAfter(j.importDeclaration([j.importNamespaceSpecifier(j.identifier('React'))], reactLiteral));\n        }\n\n        if (specifiers.length > 1) {\n          const typeImports = [];\n          const regularImports = [];\n\n          for (let x = 0; x < specifiers.length; x++) {\n            if (specifiers[x].type !== 'ImportDefaultSpecifier') {\n              if (specifiers[x].importKind === 'type') {\n                typeImports.push(specifiers[x]);\n              } else {\n                regularImports.push(specifiers[x]);\n              }\n            }\n          }\n\n          if (regularImports.length > 0) {\n            j(reactPath).insertAfter(j.importDeclaration(regularImports, reactLiteral));\n          }\n\n          if (typeImports.length > 0) {\n            j(reactPath).insertAfter(j.importDeclaration(typeImports, reactLiteral, 'type'));\n          }\n        }\n\n        isImportRemoved = true;\n        j(reactPath).remove();\n      }\n    }\n\n    if (!isImportRemoved) {\n      return null;\n    }\n  } // If the first node has been modified or deleted, reattach the comments\n\n\n  const firstNode2 = getFirstNode();\n\n  if (firstNode2 !== firstNode) {\n    firstNode2.comments = comments;\n  }\n\n  return root.toSource(printOptions);\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "update-react-imports.js"
      ],
      "names": [
        "module",
        "exports",
        "file",
        "api",
        "options",
        "j",
        "jscodeshift",
        "printOptions",
        "root",
        "source",
        "destructureNamespaceImports",
        "getFirstNode",
        "find",
        "Program",
        "get",
        "node",
        "firstNode",
        "comments",
        "isVariableDeclared",
        "variable",
        "Identifier",
        "name",
        "filter",
        "path",
        "parent",
        "value",
        "type",
        "size",
        "reactImportPaths",
        "ImportDeclaration",
        "reactPaths",
        "specifiers",
        "length",
        "importKind",
        "some",
        "specifier",
        "local",
        "Error",
        "reactPath",
        "paths",
        "reactLiteral",
        "isDefaultImport",
        "isReactImportUsed",
        "reactIdentifiers",
        "reactTypeIdentifiers",
        "canDestructureReactVariable",
        "object",
        "qualification",
        "QualifiedTypeIdentifier",
        "forEach",
        "id",
        "MemberExpression",
        "property",
        "JSXMemberExpression",
        "replaceWith",
        "identifier",
        "jsxIdentifier",
        "i",
        "imported",
        "regularImports",
        "Object",
        "keys",
        "push",
        "importSpecifier",
        "typeImports",
        "insertAfter",
        "importDeclaration",
        "importDefaultSpecifier",
        "remove",
        "isImportRemoved",
        "importNamespaceSpecifier",
        "x",
        "firstNode2",
        "toSource"
      ],
      "mappings": "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",
      "sourceRoot": "/home/alin/.npm/_npx/152949/lib/node_modules/react-codemod/transforms/",
      "sourcesContent": [
        "/**\n * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.\n *\n * @format\n */\n\n'use strict';\n\nmodule.exports = function(file, api, options) {\n  const j = api.jscodeshift;\n  const printOptions = options.printOptions || {};\n  const root = j(file.source);\n  const destructureNamespaceImports = options.destructureNamespaceImports;\n\n  // https://github.com/facebook/jscodeshift/blob/master/recipes/retain-first-comment.md\n  function getFirstNode() {\n    return root.find(j.Program).get('body', 0).node;\n  }\n\n  // Save the comments attached to the first node\n  const firstNode = getFirstNode();\n  const { comments } = firstNode;\n\n  function isVariableDeclared(variable) {\n    return (\n      root\n        .find(j.Identifier, {\n          name: variable,\n        })\n        .filter(\n          path =>\n            path.parent.value.type !== 'MemberExpression' &&\n            path.parent.value.type !== 'QualifiedTypeIdentifier' &&\n            path.parent.value.type !== 'JSXMemberExpression',\n        )\n        .size() > 0\n    );\n  }\n\n  // Get all paths that import from React\n  const reactImportPaths = root\n    .find(j.ImportDeclaration, {\n      type: 'ImportDeclaration',\n    })\n    .filter(path => {\n      return (\n        (\n          path.value.source.type === 'Literal' ||\n          path.value.source.type === 'StringLiteral'\n        ) && (\n          path.value.source.value === 'React' ||\n          path.value.source.value === 'react'\n        )\n      );\n    });\n\n  // get all namespace/default React imports\n  const reactPaths = reactImportPaths.filter(path => {\n    return (\n      path.value.specifiers.length > 0 &&\n      path.value.importKind === 'value' &&\n      path.value.specifiers.some(specifier => specifier.local.name === 'React')\n    );\n  });\n\n  if (reactPaths.size() > 1) {\n    throw Error(\n      'There should only be one React import. Please remove the duplicate import and try again.',\n    );\n  }\n\n  if (reactPaths.size() === 0) {\n    return null;\n  }\n\n  const reactPath = reactPaths.paths()[0];\n  // Reuse the node so that we can preserve quoting style.\n  const reactLiteral = reactPath.value.source;\n\n  const isDefaultImport = reactPath.value.specifiers.some(\n    specifier =>\n      specifier.type === 'ImportDefaultSpecifier' &&\n      specifier.local.name === 'React',\n  );\n\n  // Check to see if we should keep the React import\n  const isReactImportUsed =\n    root\n      .find(j.Identifier, {\n        name: 'React',\n      })\n      .filter(path => {\n        return path.parent.parent.value.type !== 'ImportDeclaration';\n      })\n      .size() > 0;\n\n  // local: imported\n  const reactIdentifiers = {};\n  const reactTypeIdentifiers = {};\n  let canDestructureReactVariable = false;\n  if (isReactImportUsed && (isDefaultImport || destructureNamespaceImports)) {\n    // Checks to see if the react variable is used itself (rather than used to access its properties)\n    canDestructureReactVariable =\n      root\n        .find(j.Identifier, {\n          name: 'React',\n        })\n        .filter(path => {\n          return path.parent.parent.value.type !== 'ImportDeclaration';\n        })\n        .filter(\n          path =>\n            !(\n              path.parent.value.type === 'MemberExpression' &&\n              path.parent.value.object.name === 'React'\n            ) &&\n            !(\n              path.parent.value.type === 'QualifiedTypeIdentifier' &&\n              path.parent.value.qualification.name === 'React'\n            ) &&\n            !(\n              path.parent.value.type === 'JSXMemberExpression' &&\n              path.parent.value.object.name === 'React'\n            ),\n        )\n        .size() === 0;\n\n    if (canDestructureReactVariable) {\n      // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a type variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. Element is declared and we are using React.Element)\n      root\n        .find(j.QualifiedTypeIdentifier, {\n          qualification: {\n            type: 'Identifier',\n            name: 'React',\n          },\n        })\n        .forEach(path => {\n          const id = path.value.id.name;\n          if (path.parent.parent.value.type === 'TypeofTypeAnnotation') {\n            // This is a typeof import so it isn't actually a type\n            reactIdentifiers[id] = id;\n\n            if (reactTypeIdentifiers[id]) {\n              canDestructureReactVariable = false;\n            }\n          } else {\n            reactTypeIdentifiers[id] = id;\n\n            if (reactIdentifiers[id]) {\n              canDestructureReactVariable = false;\n            }\n          }\n\n          if (isVariableDeclared(id)) {\n            canDestructureReactVariable = false;\n          }\n        });\n\n      // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. createElement is declared and we are using React.createElement)\n      root\n        .find(j.MemberExpression, {\n          object: {\n            type: 'Identifier',\n            name: 'React',\n          },\n        })\n        .forEach(path => {\n          const property = path.value.property.name;\n          reactIdentifiers[property] = property;\n\n          if (isVariableDeclared(property) || reactTypeIdentifiers[property]) {\n            canDestructureReactVariable = false;\n          }\n        });\n\n      // Add React identifiers to separate object so we can destructure the imports\n      // later if we can. If a JSX variable that we are trying to import has already\n      // been declared, do not try to destructure imports\n      // (ex. Fragment is declared and we are using React.Fragment)\n      root\n        .find(j.JSXMemberExpression, {\n          object: {\n            type: 'JSXIdentifier',\n            name: 'React',\n          },\n        })\n        .forEach(path => {\n          const property = path.value.property.name;\n          reactIdentifiers[property] = property;\n\n          if (isVariableDeclared(property) || reactTypeIdentifiers[property]) {\n            canDestructureReactVariable = false;\n          }\n        });\n    }\n  }\n\n  if (canDestructureReactVariable) {\n    // replace react identifiers\n    root\n      .find(j.QualifiedTypeIdentifier, {\n        qualification: {\n          type: 'Identifier',\n          name: 'React',\n        },\n      })\n      .forEach(path => {\n        const id = path.value.id.name;\n\n        j(path).replaceWith(j.identifier(id));\n      });\n\n    root\n      .find(j.MemberExpression, {\n        object: {\n          type: 'Identifier',\n          name: 'React',\n        },\n      })\n      .forEach(path => {\n        const property = path.value.property.name;\n\n        j(path).replaceWith(j.identifier(property));\n      });\n\n    root\n      .find(j.JSXMemberExpression, {\n        object: {\n          type: 'JSXIdentifier',\n          name: 'React',\n        },\n      })\n      .forEach(path => {\n        const property = path.value.property.name;\n\n        j(path).replaceWith(j.jsxIdentifier(property));\n      });\n\n    // Add exisiting React imports to map\n    reactImportPaths.forEach(path => {\n      const specifiers = path.value.specifiers;\n      for (let i = 0; i < specifiers.length; i++) {\n        const specifier = specifiers[i];\n        // get all type and regular imports that are imported\n        // from React\n        if (specifier.type === 'ImportSpecifier') {\n          if (\n            path.value.importKind === 'type' ||\n            specifier.importKind === 'type'\n          ) {\n            reactTypeIdentifiers[specifier.local.name] =\n              specifier.imported.name;\n          } else {\n            reactIdentifiers[specifier.local.name] = specifier.imported.name;\n          }\n        }\n      }\n    });\n\n    const regularImports = [];\n    Object.keys(reactIdentifiers).forEach(local => {\n      const imported = reactIdentifiers[local];\n      regularImports.push(\n        j.importSpecifier(j.identifier(imported), j.identifier(local)),\n      );\n    });\n\n    const typeImports = [];\n    Object.keys(reactTypeIdentifiers).forEach(local => {\n      const imported = reactTypeIdentifiers[local];\n      typeImports.push(\n        j.importSpecifier(j.identifier(imported), j.identifier(local)),\n      );\n    });\n\n    if (regularImports.length > 0) {\n      j(reactPath).insertAfter(\n        j.importDeclaration(regularImports, reactLiteral),\n      );\n    }\n    if (typeImports.length > 0) {\n      j(reactPath).insertAfter(\n        j.importDeclaration(typeImports, reactLiteral, 'type'),\n      );\n    }\n\n    // remove all old react imports\n    reactImportPaths.forEach(path => {\n      // This is for import type React from 'react' which shouldn't\n      // be removed\n      if (\n        path.value.specifiers.some(\n          specifier =>\n            specifier.type === 'ImportDefaultSpecifier' &&\n            specifier.local.name === 'React' &&\n            (specifier.importKind === 'type' ||\n              path.value.importKind === 'type'),\n        )\n      ) {\n        j(path).insertAfter(\n          j.importDeclaration(\n            [j.importDefaultSpecifier(j.identifier('React'))],\n            reactLiteral,\n            'type',\n          ),\n        );\n      }\n      j(path).remove();\n    });\n  } else {\n    // Remove the import because it's not being used\n    // If we should keep the React import, just convert\n    // default imports to named imports\n    let isImportRemoved = false;\n    const specifiers = reactPath.value.specifiers;\n    for (let i = 0; i < specifiers.length; i++) {\n      const specifier = specifiers[i];\n      if (specifier.type === 'ImportNamespaceSpecifier') {\n        if (!isReactImportUsed) {\n          isImportRemoved = true;\n          j(reactPath).remove();\n        }\n      } else if (specifier.type === 'ImportDefaultSpecifier') {\n        if (isReactImportUsed) {\n          j(reactPath).insertAfter(\n            j.importDeclaration(\n              [j.importNamespaceSpecifier(j.identifier('React'))],\n              reactLiteral,\n            ),\n          );\n        }\n\n        if (specifiers.length > 1) {\n          const typeImports = [];\n          const regularImports = [];\n          for (let x = 0; x < specifiers.length; x++) {\n            if (specifiers[x].type !== 'ImportDefaultSpecifier') {\n              if (specifiers[x].importKind === 'type') {\n                typeImports.push(specifiers[x]);\n              } else {\n                regularImports.push(specifiers[x]);\n              }\n            }\n          }\n          if (regularImports.length > 0) {\n            j(reactPath).insertAfter(\n              j.importDeclaration(regularImports, reactLiteral),\n            );\n          }\n          if (typeImports.length > 0) {\n            j(reactPath).insertAfter(\n              j.importDeclaration(typeImports, reactLiteral, 'type'),\n            );\n          }\n        }\n\n        isImportRemoved = true;\n        j(reactPath).remove();\n      }\n    }\n\n    if (!isImportRemoved) {\n      return null;\n    }\n  }\n\n  // If the first node has been modified or deleted, reattach the comments\n  const firstNode2 = getFirstNode();\n  if (firstNode2 !== firstNode) {\n    firstNode2.comments = comments;\n  }\n\n  return root.toSource(printOptions);\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 499162500000
  }
}